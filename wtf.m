function [methodinfo,structs,enuminfo,ThunkLibName]=wtf
%WTF Create structures to define interfaces found in 'ADIDatCAPI_ml'.

%This function was generated by loadlibrary.m parser version  on Mon Mar 31 22:02:22 2014
%perl options:'ADIDatCAPI_ml.i -outfile=wtf.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% ADIResultCode ADI_OpenFile ( const unsigned short * path , ADI_FileHandle * fileH , ADIFileOpenMode mode ); 
fcns.name{fcnNum}='ADI_OpenFile'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'uint16Ptr', 'ADI_FileHandle__PtrPtr', 'ADIFileOpenMode'};fcnNum=fcnNum+1;
% ADIResultCode ADI_CreateFile ( const wchar_t * path , ADI_FileHandle * fileH ); 
fcns.name{fcnNum}='ADI_CreateFile'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'voidPtr', 'ADI_FileHandle__PtrPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetErrorMessage ( ADIResultCode code , wchar_t * messageOut , long maxChars , long * textLen ); 
fcns.name{fcnNum}='ADI_GetErrorMessage'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADIResultCode', 'voidPtr', 'long', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_TickToSamplePos ( ADI_FileHandle fileH , long channel , long record , long tickInRecord , double * samplePosInRecord ); 
fcns.name{fcnNum}='ADI_TickToSamplePos'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_SamplePosToTick ( ADI_FileHandle fileH , long channel , long record , double samplePosInRecord , double * tickInRecord ); 
fcns.name{fcnNum}='ADI_SamplePosToTick'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'long', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetNumberOfRecords ( ADI_FileHandle fileH , long * nRecords ); 
fcns.name{fcnNum}='ADI_GetNumberOfRecords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetNumberOfChannels ( int fileH , long * nChannels ); 
fcns.name{fcnNum}='ADI_GetNumberOfChannels'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'int32', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetNumTicksInRecord ( ADI_FileHandle fileH , long record , long * nTicks ); 
fcns.name{fcnNum}='ADI_GetNumTicksInRecord'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetRecordTickPeriod ( ADI_FileHandle fileH , long channel , long record , double * secsPerTick ); 
fcns.name{fcnNum}='ADI_GetRecordTickPeriod'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetNumSamplesInRecord ( ADI_FileHandle fileH , long channel , long record , long * nSamples ); 
fcns.name{fcnNum}='ADI_GetNumSamplesInRecord'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'long', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetRecordSamplePeriod ( ADI_FileHandle fileH , long channel , long record , double * secsPerSample ); 
fcns.name{fcnNum}='ADI_GetRecordSamplePeriod'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetRecordTime ( ADI_FileHandle fileH , long record , time_t * triggerTime , double * fracSecs , long * triggerMinusStartTicks ); 
fcns.name{fcnNum}='ADI_GetRecordTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'voidPtr', 'doublePtr', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_CreateCommentsAccessor ( ADI_FileHandle fileH , long record , ADI_CommentsHandle * commentsH ); 
fcns.name{fcnNum}='ADI_CreateCommentsAccessor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'ADI_CommentsHandle__PtrPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_CloseCommentsAccessor ( ADI_CommentsHandle * commentsH ); 
fcns.name{fcnNum}='ADI_CloseCommentsAccessor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_CommentsHandle__PtrPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetCommentInfo ( ADI_CommentsHandle commentsH , long * tickPos , long * channel , long * commentNum , wchar_t * text , long maxChars , long * textLen ); 
fcns.name{fcnNum}='ADI_GetCommentInfo'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_CommentsHandle__Ptr', 'longPtr', 'longPtr', 'longPtr', 'voidPtr', 'long', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_NextComment ( ADI_CommentsHandle commentsH ); 
fcns.name{fcnNum}='ADI_NextComment'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_CommentsHandle__Ptr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetSamples ( ADI_FileHandle fileH , long channel , long record , long startPos , ADICDataFlags dataType , long nLength , float * data , long * returned ); 
fcns.name{fcnNum}='ADI_GetSamples'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'long', 'long', 'ADICDataFlags', 'long', 'singlePtr', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetUnitsName ( ADI_FileHandle fileH , long channel , long record , wchar_t * units , long maxChars , long * textLen ); 
fcns.name{fcnNum}='ADI_GetUnitsName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'long', 'voidPtr', 'long', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_GetChannelName ( ADI_FileHandle fileH , long channel , wchar_t * name , long maxChars , long * textLen ); 
fcns.name{fcnNum}='ADI_GetChannelName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'voidPtr', 'long', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_SetChannelName ( ADI_FileHandle fileH , long channel , const wchar_t * name ); 
fcns.name{fcnNum}='ADI_SetChannelName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'voidPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_CreateWriter ( ADI_FileHandle fileH , ADI_WriterHandle * writerH ); 
fcns.name{fcnNum}='ADI_CreateWriter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'ADI_WriterHandle__PtrPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_SetChannelInfo ( ADI_WriterHandle writerH , long channel , int enabled , double secondsPerSample , const wchar_t * units , const ADIDataLimits * limits ); 
fcns.name{fcnNum}='ADI_SetChannelInfo'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_WriterHandle__Ptr', 'long', 'int32', 'double', 'voidPtr', 'ADIDataLimitsPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_StartRecord ( ADI_WriterHandle writerH , time_t triggerTime , double fracSecs , long triggerMinusStartTicks ); 
fcns.name{fcnNum}='ADI_StartRecord'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_WriterHandle__Ptr', 'error', 'double', 'long'};fcnNum=fcnNum+1;
% ADIResultCode ADI_AddChannelSamples ( ADI_WriterHandle writerH , long channel , float * data , long nSamples , long * newTicksAdded ); 
fcns.name{fcnNum}='ADI_AddChannelSamples'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_WriterHandle__Ptr', 'long', 'singlePtr', 'long', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_FinishRecord ( ADI_WriterHandle writerH ); 
fcns.name{fcnNum}='ADI_FinishRecord'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_WriterHandle__Ptr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_CommitFile ( ADI_WriterHandle writerH , long flags ); 
fcns.name{fcnNum}='ADI_CommitFile'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_WriterHandle__Ptr', 'long'};fcnNum=fcnNum+1;
% ADIResultCode ADI_CloseWriter ( ADI_WriterHandle * writerH ); 
fcns.name{fcnNum}='ADI_CloseWriter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_WriterHandle__PtrPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_AddComment ( ADI_FileHandle fileH , long channel , long record , long tickPos , const wchar_t * text , long * commentNum ); 
fcns.name{fcnNum}='ADI_AddComment'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long', 'long', 'long', 'voidPtr', 'longPtr'};fcnNum=fcnNum+1;
% ADIResultCode ADI_DeleteComment ( ADI_FileHandle fileH , long commentNum ); 
fcns.name{fcnNum}='ADI_DeleteComment'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__Ptr', 'long'};fcnNum=fcnNum+1;
% ADIResultCode ADI_CloseFile ( ADI_FileHandle * fileH ); 
fcns.name{fcnNum}='ADI_CloseFile'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ADIResultCode'; fcns.RHS{fcnNum}={'ADI_FileHandle__PtrPtr'};fcnNum=fcnNum+1;
structs.ADIDataLimits.members=struct('mMaxLimit', 'single', 'mMinLimit', 'single');
structs.ADI_FileHandle__.members=struct('unused', 'int32');
structs.ADI_WriterHandle__.members=struct('unused', 'int32');
structs.ADI_CommentsHandle__.members=struct('unused', 'int32');
enuminfo.ADICDataFlags=struct('kADICDataAtSampleRate',0,'kADICDataAtTickRate',2147483648);
enuminfo.ADIFileOpenMode=struct('kOpenFileForReadOnly',0,'kOpenFileForReadAndWrite',1);
enuminfo.ADIResultCode=struct('kResultSuccess',0,'kResultErrorFlagBit',2147483648,'kResultInvalidArg',2147942487,'kResultFail',2147500037,'kResultFileNotFound',2147680258,'kResultADICAPIMsgBase',2684653568,'kResultFileIOError',2684653568,'kResultFileOpenFail',2684653569,'kResultInvalidFileHandle',2684653570,'kResultInvalidPosition',2684653571,'kResultInvalidCommentNum',2684653572,'kResultNoData',2684653573,'kResultBufferTooSmall',2684653574);
methodinfo=fcns;